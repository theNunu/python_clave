import getpass
import os
import json # Import the json module
from dotenv import load_dotenv
from langchain_tavily import TavilySearch

# load_dotenv()
# os.getenv()
load_dotenv()
api_key = os.getenv("TAVILY_API_KEY")

# mi_api_key = os.environ["TAVILY_API_KEY"] = "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"

if not os.environ.get("TAVILY_API_KEY"):
    # print("entra")
    os.environ["TAVILY_API_KEY"] = getpass.getpass("TAVILY_API_KEY")

def asking_answer(answer_user: str) -> str:
    print("espere un momento ....")


    tool = TavilySearch(
        max_results=50,
        topic="general",
        include_answer=True, #incluir como respuesta
        # include_raw_content=False,
        include_images=True,
        # include_image_descriptions=False,
        search_depth="advanced",
        # time_range="day",
        # include_domains=None,
        # exclude_domains=None
    )

    # This is usually generated by a model, but we'll create a tool call directly for demo purposes.
    model_generated_tool_call = {
        "args": {"query": answer_user},
        "id": "1",
        "name": "tavily",
        "type": "tool_call",
    }
    # print(f"modelo {model_generated_tool_call}")


    tool_msg = tool.invoke(model_generated_tool_call)

    # print(f" herramienta invocada {tool_msg}")

    # The content is a JSON string of results
    # print(tool_msg.content[:400]) #IMPRESION HECHA EN LA DOCUMENTACION
    print("\n -- -- Respuesta: ")

    # Convert the JSON string to a Python dictionary
    results_dict = json.loads(tool_msg.content)
    # print(f"contendio de content: {results_dict}")

    # Now, you can access the 'answer' key directly
    solo_respuesta = results_dict["answer"]

    # print("Contenido completo (JSON string):")
    # print(tool_msg.content)

    print(solo_respuesta)
    return solo_respuesta
